name: "Deployment pipeline"
env:
  AWS_REGION: af-south-1

on:
  push:
    branches:
      - main

jobs:
  terraform:
    permissions:
      id-token: write
      contents: read
    name: "Manage AWS Resources"
    runs-on: ubuntu-latest
    outputs:
      dbhost: ${{ steps.tf_outputs.outputs.dbhost }}
      apiec2host: ${{ steps.tf_outputs.outputs.apiec2host }}
      webec2host: ${{ steps.tf_outputs.outputs.webec2host }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::957617350095:role/github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure S3 bucket exists for backend
        run: |
          BUCKET_NAME="sumsang-bucket-state-tf"
          REGION="${{ env.AWS_REGION }}"

          if ! aws s3api head-bucket --bucket "$BUCKET_NAME" 2>/dev/null; then
            echo "Bucket does not exist. Creating..."
            aws s3api create-bucket --bucket "$BUCKET_NAME" --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
          else
            echo "Bucket already exists."
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0.1
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=sumsang-bucket-state-tf" -backend-config="key=terraformstate/terraform.tfstate" -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Capture Terraform Outputs
        id: tf_outputs
        run: |
          echo "dbhost=$(terraform output -raw db_host)" >> $GITHUB_OUTPUT
          echo "apiec2host=$(terraform output -raw api_ec2_host)" >> $GITHUB_OUTPUT
          echo "webec2host=$(terraform output -raw web_ec2_host)" >> $GITHUB_OUTPUT

  build-front-end:
    name: Build front-end
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install required dependencies
        run: npm install
        working-directory: sumsang-frontend
      
      - name: Build application
        run: npm run build
        working-directory: sumsang-frontend

      - name: Package application
        working-directory: sumsang-frontend
        run: |
          mkdir -p front-end-build
          cp -r build front-end-build/
          cp package.json front-end-build/
          zip -r front-end-build.zip front-end-build
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: front-end-build
          path: sumsang-frontend/front-end-build.zip

  deploy-frontend:
    name: Deploy front-end to EC2
    permissions:
      id-token: write
      contents: read
    needs: 
      - build-front-end
      - terraform
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::957617350095:role/github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            WEB_EC2_PRIVATE_KEY, webprivatekey

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: front-end-build

      - name: Setup private key
        run: |
          echo "${{ env.WEB_EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Deploy
        run: |
          EC2_HOST=${{ needs.terraform.outputs.webec2host }}
          scp -o StrictHostKeyChecking=no -i privatekey.pem ./front-end-build.zip "ubuntu@$EC2_HOST:front-end-build.zip"
          
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" ' 
            unzip -o front-end-build.zip && cd front-end-build/ &&
            npm install
          '

          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" ' 
          cat <<EOF > start-serve.sh
          #!/bin/bash
          npx serve -s build
          EOF'

      - name: Make script executable 
        run: |
          EC2_HOST=${{ needs.terraform.outputs.webec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            mv start-serve.sh front-end-build/ && 
            cd front-end-build/ &&
            chmod +x start-serve.sh
          '

      - name: Run with pm2
        run: |
          EC2_HOST=${{ needs.terraform.outputs.webec2host }}
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" '
            cd front-end-build/ && 
            # Stop and delete existing pm2 process if it exists
            if pm2 list | grep -q "sumsang-front-end"; then
              pm2 delete sumsang-front-end;
            fi && 
            pm2 start ./start-serve.sh --name sumsang-front-end
          '
  build-api:
    name: Build API
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install required dependencies
        run: npm install
        working-directory: sumsang-backend
      
      - name: Compile Typescript to Javascript
        run: npm run build-linux
        working-directory: sumsang-backend

      - name: Package application
        working-directory: sumsang-backend
        run: |
          mkdir -p api-build
          cp -r dist api-build/
          cp package.json api-build/
          zip -r api-build.zip api-build
          
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-build
          path: sumsang-backend/api-build.zip

  deploy-api:
    name: Deploy API to EC2
    permissions:
      id-token: write
      contents: read
    needs: 
      - build-api
      - terraform
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::957617350095:role/github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            API_EC2_PRIVATE_KEY, apiprivatekey
            POSTGRES_USER, postgresuser
            POSTGRES_PASS, postgrespass
            DB_HOST, dbhost
            DB_NAME, dbname
            CLIENT_CERT_PATH, servercrtpath
            CLIENT_KEY_PATH, serverkeypath

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: api-build

      - name: Setup private key
        run: |
          echo "${{ env.API_EC2_PRIVATE_KEY }}" > privatekey.pem
          chmod 0500 privatekey.pem

      - name: Set env variables
        run: |
              EC2_HOST=${{ needs.terraform.outputs.apiec2host }}
              ssh -o StrictHostKeyChecking=no -i privatekey.pem ubuntu@$EC2_HOST 'bash -s' <<'EOF'
              sudo tee /etc/environment > /dev/null <<'ENV_VAR'
              DB_USER=${{ env.POSTGRES_USER }}
              DB_PASSWORD=${{ env.POSTGRES_PASS }}
              DB_HOST=${{ env.DB_HOST }}
              DB_NAME=${{ env.DB_NAME }}
              NODE_ENV=production
              CLIENT_CERT_PATH=${{ env.CLIENT_CERT_PATH }}
              CLIENT_KEY_PATH=${{ env.CLIENT_KEY_PATH }}
              USE_MANUAL_TICKS=true
              USE_TEST_DB=false
              USE_TEST_CONSUMER_DELIVERIES=true
              USE_TEST_BULK_DELIVERIES=true
              USE_TEST_COMMERCIAL_BANK=false
              USE_TEST_RETAIL_BANK=true
              USE_TEST_CASE_SUPPLIERS=false
              USE_TEST_SCREEN_SUPPLIERS=true
              USE_TEST_ELECTRONICS_SUPPLIERS=true
              USE_TEST_THOH=true
              ENV_VAR
              EOF
              
      
      - name: Deploy
        run: |
          EC2_HOST=${{ needs.terraform.outputs.apiec2host }}
          scp -o StrictHostKeyChecking=no -i privatekey.pem ./api-build.zip "ubuntu@$EC2_HOST:api-build.zip"
          
          ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" ' 
            unzip -o api-build.zip &&

            cd api-build/ &&

            npm install &&
            
            # Stop and delete existing pm2 process if it exists
            if pm2 list | grep -q "sumsang-api"; then
              pm2 delete sumsang-api;
            fi &&
            
            cd dist &&
            pm2 start index.js --name sumsang-api
          '

  reverse-proxy-setup:
    needs:
        - deploy-api
        - terraform
        - deploy-frontend
    name: Setup reverse proxies
    permissions:
        id-token: write
        contents: read
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::957617350095:role/github-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Get secrets from AWS Key Store
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          API_EC2_PRIVATE_KEY, apiprivatekey
          WEB_EC2_PRIVATE_KEY, webprivatekey

    - name: Setup api private key
      run: |
        echo "${{ env.API_EC2_PRIVATE_KEY }}" > apiprivatekey.pem
        chmod 0500 apiprivatekey.pem

    - name: Setup web private key
      run: |
        echo "${{ env.WEB_EC2_PRIVATE_KEY }}" > webprivatekey.pem
        chmod 0500 webprivatekey.pem

    - name: Setup nginx proxy on API EC2
      run: |
        EC2_HOST=${{ needs.terraform.outputs.apiec2host }}

        ssh -o StrictHostKeyChecking=no -i apiprivatekey.pem ubuntu@$EC2_HOST 'bash -s' <<'EOF'
        sudo tee /etc/nginx/sites-enabled/default > /dev/null <<'NGINX_CONF'
        server {
            listen 80;
            server_name sumsang-phones-api.projects.bbdgrad.com;
            return 301 https://$host$request_uri;
        }

        map $ssl_client_s_dn $is_valid_ou {
            default no;
            ~OU=sumsang-company yes;
            ~OU=retail-bank yes;
            ~OU=screen-supplier yes;
            ~OU=case-supplier yes;
            ~OU=consumer-logistics yes;
            ~OU=bulk-logistics yes;
            ~OU=commercial-bank yes;
            ~OU=pear-company yes;
            ~OU=thoh yes;
            ~OU=recycler yes;
            ~OU=electronics-supplier yes;
        }

        map $ssl_client_s_dn $client_ou {
            default "";
            ~OU=([^,]+) $1;
        }

        map $ssl_client_s_dn $client_cn {
            default "";
            ~CN=([^,]+) $1;
        }

        server {
            listen 443 ssl;
            server_name sumsang-phones-api.projects.bbdgrad.com;
              
            ssl_certificate /etc/letsencrypt/live/sumsang-phones-api.projects.bbdgrad.com/fullchain.pem; # managed by Certbot
            ssl_certificate_key /etc/letsencrypt/live/sumsang-phones-api.projects.bbdgrad.com/privkey.pem; # managed by Certbot
            # Client cert validation (mTLS)
            ssl_client_certificate /etc/nginx/certificates/root-ca.crt;
            ssl_verify_client on;

            if ($is_valid_ou = no) {
                return 403;
            }

            location / {
                proxy_set_header X-Client-OU $client_ou;
                proxy_set_header X-Client-CN $client_cn;
                proxy_pass http://localhost:3000;
            }
        }

        # TLS only, no mTLS — internal frontend uses this
        server {
            listen 444 ssl;
            server_name sumsang-phones-api.projects.bbdgrad.com;

            ssl_certificate /etc/letsencrypt/live/sumsang-phones-api.projects.bbdgrad.com/fullchain.pem; # managed by Certbot
            ssl_certificate_key /etc/letsencrypt/live/sumsang-phones-api.projects.bbdgrad.com/privkey.pem; # managed by Certbot

            location / {
                proxy_pass http://localhost:3000;
            }
        }
        NGINX_CONF
        EOF

    - name: Verify and Reload nginx on API
      run: |
        EC2_HOST=${{ needs.terraform.outputs.apiec2host }}
        ssh -o StrictHostKeyChecking=no -i apiprivatekey.pem "ubuntu@$EC2_HOST" ' 
          sudo nginx -t && sudo systemctl reload nginx
        '
    - name: Setup nginx proxy on frontend
      run: |
        EC2_HOST=${{ needs.terraform.outputs.webec2host }}

        ssh -o StrictHostKeyChecking=no -i webprivatekey.pem ubuntu@$EC2_HOST 'bash -s' <<'EOF'
        sudo tee /etc/nginx/sites-enabled/default > /dev/null <<'NGINX_CONF'
         server {
        listen 80;
        server_name sumsang-phones.projects.bbdgrad.com;

        # Required for Certbot's HTTP-01 challenge
        location /.well-known/acme-challenge/ {
            root /var/www/html;
        }

        location / {
            proxy_pass http://localhost:3000; # Front-end
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

            listen 443 ssl; # managed by Certbot
            ssl_certificate /etc/letsencrypt/live/sumsang-phones.projects.bbdgrad.com/fullchain.pem; # managed by Certbot
            ssl_certificate_key /etc/letsencrypt/live/sumsang-phones.projects.bbdgrad.com/privkey.pem; # managed by Certbot
            include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
            ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

        }
        server {
            if ($host = sumsang-phones.projects.bbdgrad.com) {
                return 301 https://$host$request_uri;
            } # managed by Certbot


        listen 80;
        server_name sumsang-phones.projects.bbdgrad.com;
            return 404; # managed by Certbot
                }
        NGINX_CONF
        EOF

    - name: Verify and Reload nginx for frontend
      run: |
        EC2_HOST=${{ needs.terraform.outputs.webec2host }}
        ssh -o StrictHostKeyChecking=no -i webprivatekey.pem "ubuntu@$EC2_HOST" ' 
          sudo nginx -t && sudo systemctl reload nginx
        '

  issue-certificates:
    needs:
    - deploy-api
    - deploy-frontend
    - terraform
    permissions:
        id-token: write
        contents: read
    name: Issue Certificates
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: arn:aws:iam::957617350095:role/github-role
        aws-region: ${{ env.AWS_REGION }}

    - name: Get secrets from AWS Key Store
      uses: aws-actions/aws-secretsmanager-get-secrets@v2
      with:
        secret-ids: |
          WEB_EC2_PRIVATE_KEY, webprivatekey

    - name: Setup private key
      run: |
        echo "${{ env.WEB_EC2_PRIVATE_KEY }}" > privatekey.pem
        chmod 0500 privatekey.pem

    - name: Cerbot
      run: |
        EC2_HOST=${{ needs.terraform.outputs.webec2host }}
        ssh -o StrictHostKeyChecking=no -i privatekey.pem "ubuntu@$EC2_HOST" ' 
          sudo apt install certbot python3-certbot-nginx -y &&
          sudo certbot --nginx -d sumsang-phones.projects.bbdgrad.com --non-interactive --agree-tos --email shashin.gounden@bbd.co.za
        '
            
  flyway:
    needs:
      - terraform
      - deploy-frontend
      - deploy-api
    permissions:
      id-token: write
      contents: read
    name: Flyway Migrations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::957617350095:role/github-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Get secrets from AWS Key Store
        uses: aws-actions/aws-secretsmanager-get-secrets@v2
        with:
          secret-ids: |
            POSTGRES_USER, postgresuser
            POSTGRES_PASS, postgrespass

      - name: Run Flyway Migrations
        run: |
          docker run --rm --volume ${{ github.workspace }}/migrations:/flyway/sql:ro redgate/flyway -url="jdbc:postgresql://${{ needs.terraform.outputs.dbhost }}/sumsangdb" -user="${{ env.POSTGRES_USER }}" -password="${{ env.POSTGRES_PASS }}" migrate
